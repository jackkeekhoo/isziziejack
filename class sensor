
import serial
import codecs
from sys import argv
from os.path import exists
import time
from statistics import mean
import re


testcomport=['COM1','COM2','COM3','COM4','COM5','COM6','COM7','COM8','COM9','COM10']


class SensorRFID:
    baudrate=57600
    comport=''
    serialport=''
    portisgood=0
    
    value_ave_final=0
    value_ave_sum=0
    value_ave_count=0
    averageresultof=20
    value_ave_array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]

    returnvalue_commonlen=13
    returnvalue="" #get from function readserial()
    millislastread=time.process_time_ns()
    connect_portinterger=0
    connect_portinterger_max=10
    def countaverage(self):
        if len(self.value_ave_array) == 0:
            avg=0
        else:
            avg = sum(self.value_ave_array) / len(self.value_ave_array) 
        print("Average is "+ str(avg))
        return avg
    def countmean(self):
        countmean = mean(self.value_ave_array)
        print("Mean is" + str(countmean))
        return countmean
    def readserial(self):
        
        value=self.serialport.readline()
        
        newvalue=self.processresult(value)
        print("value is ..."+ str(newvalue)+"g")
        #return value
    def loop(self):
        if self.serialport=='':
            if self.connect() !=1:
                return()
        self.returnvalue=self.readserial()
        #self.value_ave_array.insert(0,self.returnvalue) # add new result to index 0
        #self.value_ave_array.pop(self.averageresultof)#pop the old last index
        print(self.returnvalue)
    def connect(self):
        print("trying to connect to")
        print(testcomport[self.connect_portinterger])
        try:
            self.serialport=serial.Serial(testcomport[self.connect_portinterger],9600)
            print("using"+self.serialport.name)
            
            return (1)
        except :
            print("Warning","cannot open")
            self.connect_portinterger+=1
            if self.connect_portinterger>= self.connect_portinterger_max:
                self.connect_portinterger=0
                time.sleep(1)
    def printarray(self):
        print(self.value_ave_array)
        return()
    def processresult(self,sensorresult):
        x= sensorresult.decode()
        
        print(x)
        filteredresult = int(re.search(r'\d+', x).group())
        print(filteredresult)

        #length of sensor result
        lengthofresult = len(sensorresult)
        print("length of result is")
        print(len(sensorresult))

        if lengthofresult != self.returnvalue_commonlen:
            return -1
        return(filteredresult)
        
    
    
class SensorWeight:
    baudrate=9600
    comport=''
    serialport=''
    portisgood=0
    
    value_ave_final=0
    value_ave_sum=0
    value_ave_count=0
    averageresultof=20
    value_ave_array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]

    returnvalue_commonlen=13
    returnvalue="" #get from function readserial()
    millislastread=time.process_time_ns()
    connect_portinterger=0
    connect_portinterger_max=10
    def countaverage(self):
        if len(self.value_ave_array) == 0:
            avg=0
        else:
            avg = sum(self.value_ave_array) / len(self.value_ave_array) 
        print("Average is "+ str(avg))
        return avg
    def countmean(self):
        countmean = mean(self.value_ave_array)
        print("Mean is" + str(countmean))
        return countmean
    def readserial(self):
        
        value=self.serialport.readline()
        
        newvalue=self.processresult(value)
        print("value is ..."+ str(newvalue)+"g")
        #return value
    def loop(self):
        if self.serialport=='':
            if self.connect() !=1:
                return()
        self.returnvalue=self.readserial()
        #self.value_ave_array.insert(0,self.returnvalue) # add new result to index 0
        #self.value_ave_array.pop(self.averageresultof)#pop the old last index
        print(self.returnvalue)
    def connect(self):
        print("trying to connect to")
        print(testcomport[self.connect_portinterger])
        try:
            self.serialport=serial.Serial(testcomport[self.connect_portinterger],9600)
            print("using"+self.serialport.name)
            
            return (1)
        except :
            print("Warning","cannot open")
            self.connect_portinterger+=1
            if self.connect_portinterger>= self.connect_portinterger_max:
                self.connect_portinterger=0
                time.sleep(1)
    def printarray(self):
        print(self.value_ave_array)
        return()
    def processresult(self,sensorresult):
        x= sensorresult.decode()
        
        print(x)
        filteredresult = int(re.search(r'\d+', x).group())
        print(filteredresult)

        #length of sensor result
        lengthofresult = len(sensorresult)
        print("length of result is")
        print(len(sensorresult))

        if lengthofresult != self.returnvalue_commonlen:
            return -1
        return(filteredresult)


        
#testing            
wyuanrfid=SensorRFID()
wyuanrfid.loop()



#/////-----   setup
snowscale=SensorWeight()
mainloop=1

#/////-----   loop    
while mainloop==1:
    snowscale.loop()


#/////-----   closing
snowscale.close()
wyuanrfid.close()


todo:
    get the result from RFID sensor
    seperate the result to factory ID,tag ID
    store it in 2 dimension array

###
#need to identify the sensor, is it weight or rfid
#for rfid, use 2 dimension array to store factory ID,tag ID


    
